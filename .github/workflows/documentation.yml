name: Update Documentation

on:
  push:
    branches:
      - main

jobs:
  update-documentation:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Get Changed Files
      - name: Get Changed Files
        id: get_changed_files
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const commitSha = context.sha;
            const commit = await github.rest.repos.getCommit({
              owner,
              repo,
              ref: commitSha
            });
            const changedFiles = commit.data.files.map(file => file.filename);
            console.log("Changed files: ", changedFiles);  // Debugging output
            return JSON.stringify(changedFiles);

      # Step 3: Read Changed Files
      - name: Read Changed Files
        id: read_changed_files
        run: |
          echo '${{ steps.get_changed_files.outputs.result }}' > changedFiles.txt
          if [ -s changedFiles.txt ]; then
            files_changed=$(cat changedFiles.txt)
          else
            files_changed='[]'
          fi
          echo "Files changed: $files_changed"  # Debugging step

      # Step 4: Call the Documentation API
      - name: Call the Documentation API
        id: call_api
        run: |
          if [ -s changedFiles.txt ]; then
            files_changed=$(cat changedFiles.txt)
          else
            files_changed='[]'
          fi
          files_changed=$(echo $files_changed | jq .)
          json_payload=$(jq -n --arg repo_owner "${{ github.repository_owner }}" --arg repo "${{ github.event.repository.name }}" --argjson files_changed "$files_changed" '{repo_owner: $repo_owner, repo: $repo, files_changed: $files_changed}')
          echo "JSON Payload: $json_payload"  # Debugging step
          response=$(curl -s https://docubot-two.vercel.app/document -H "Content-Type: application/json" -d "$json_payload")
          if [ $? -ne 0 ]; then
            echo "Error in API request"
            exit 1
          fi
          echo "API Response: $response"  # Debugging step
          if echo "$response" | jq -e . > /dev/null 2>&1; then
            echo "$response" > response.json
          else
            echo "Invalid JSON response: $response"
            exit 1
          fi

      # Step 5: Extract Documentation from API Response
      - name: Extract Documentation
        run: |
          response_content=$(jq -r '.updated_doc' response.json)
          if [ -z "$response_content" ]; then
            echo "No documentation was generated."
            exit 1
          fi
          echo "$response_content" > documentation.md
          echo "Documentation generated successfully."

      # Step 6: Commit and Push Changes if Documentation Was Updated
      - name: Commit and Push Changes
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          if ! git diff --quiet documentation.md; then
            echo "Documentation updated, committing changes..."
            git add documentation.md
            git commit -m "Update documentation with API data"
            git push
          else
            echo "No changes in documentation.md, skipping commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
